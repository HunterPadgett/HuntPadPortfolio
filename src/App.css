* {
  font-family: "Oswald", sans-serif;
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  font-family: "Oswald", sans-serif;
  background-color: #000000ee;
  max-width: 100%;
  overflow-x: hidden;
}

/* NAV BAR STYLING */
#navContainer {
  display: flex;
  justify-content: center;
  position: fixed;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  z-index: 1;
}

#navContainer-bg {
  display: flex;
  justify-content: center;
  position: fixed;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  background: linear-gradient(90deg, #8a2387 0%, #e94057 50%, #f27121 100%);
  transition: 0.9s ease all;
  z-index: 1;
}

#navText {
  font-size: 40px;
  color: #f5f5f5;
  text-decoration: none;
  text-shadow: 2px 3px 5px rgba(0, 0, 0, 0.712);
}

#navText-bg {
  font-size: 40px;
  color: #f5f5f5;
  text-decoration: none;
}

#navText:hover {
  font-size: 41px;
  color: #ce162e;
  transition: 0.4s;
  cursor: pointer;
  text-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
}

#navText-bg:hover {
  font-size: 41px;
  /* color: #000000; */
  transition: 0.3s;
  cursor: pointer;
  text-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
}

#navText::after {
  content: "";
  display: block;
  width: 0;
  height: 4px;
  background: #ce162e;
  transition: width 0.3s;
  box-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
}

#navText-bg::after {
  content: "";
  display: block;
  width: 0;
  height: 4px;
  background: #f5f5f5;
  transition: width 0.3s;
  box-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
}

#navText:hover::after {
  width: 100%;
}

#navText-bg:hover::after {
  width: 100%;
}

@media screen and (max-width: 960px) {
  #navText {
    transition: 0.8s all ease;
    font-size: 15px;
    color: #f5f5f5;
    text-decoration: none;
  }
}

@media screen and (max-width: 960px) {
  #navText-bg {
    transition: 0.8s all ease;
    font-size: 15px;
    color: #f5f5f5;
    text-decoration: none;
  }
}

@media screen and (max-width: 960px) {
  #navText:hover {
    transition: 0.8s all ease;
    font-size: 16px;
    color: #ce243b;
    text-decoration: none;
    cursor: pointer;
    text-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
  }
}

@media screen and (max-width: 960px) {
  #navText-bg:hover {
    transition: 0.8s all ease;
    font-size: 16px;
    /* color: #ce243b; */
    text-decoration: none;
    cursor: pointer;
    text-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
  }
}

/* 

HOME STYLING 

*/

.homeImg {
  background-image: url("./img/redmnt.jpg");
  background-size: cover;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  top: 0;
  left: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: -1;
}

#home {
  height: 100vh;
}

#homeName {
  display: flex;
  justify-content: center;
  /* align-items: center; */
  font-size: 120px;
  text-shadow: 2px 3px 5px rgb(0, 0, 0);
  font-weight: bold;
  color: #f5f5f5;
  text-decoration: none;
  font-family: "Oswald", sans-serif;
}

#homeBody {
  display: flex;
  justify-content: center;
  font-size: 90px;
  text-shadow: 2px 3px 5px rgb(0, 0, 0);
  font-weight: bold;
  color: #f5f5f5;
  text-decoration: none;
  font-family: "Oswald", sans-serif;
}

@media screen and (max-width: 960px) {
  #homeName {
    transition: 0.8s all ease;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;

    font-size: 60px;
    font-weight: bold;
    color: #f5f5f5;
    text-decoration: none;
    font-family: "Oswald", sans-serif;
  }
}

@media screen and (max-width: 960px) {
  #homeBody {
    transition: 0.8s all ease;
    display: flex;
    justify-content: center;
    font-size: 30px;
    font-weight: bold;
    color: #f5f5f5;
    text-decoration: none;
    font-family: "Oswald", sans-serif;
  }
}

/* 

ABOUT SCREEN STYLING 

*/

.aboutImg {
  /* background-image: url("./img/abstract.jpg"); */
  background-color: #121212;
  background-size: cover;
  position: relative;
  top: 0;
  left: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: 0;
}

#spacePls {
  padding-bottom: 5rem;
}

#aboutMeTitle {
  font-size: 70px;
  font-weight: bold;
  color: #f5f5f5;
  text-decoration: none;
}

@media screen and (max-width: 960px) {
  #aboutMeTitle {
    transition: 0.8s all ease;
    font-size: 55px;
    font-weight: bold;
    color: #f5f5f5;
    text-decoration: none;
  }
}

#aboutBreak {
  background: linear-gradient(90deg, #8a2387 0%, #e94057 50%, #f27121 100%);
  height: 7px;
}

#aboutMeBody {
  font-size: 30px;
  /* font-weight: bold; */
  color: #f5f5f5;
  text-decoration: none;
  font-family: "Oswald", sans-serif;
}

@media screen and (max-width: 960px) {
  #aboutMeBody {
    transition: 0.8s all ease;
    font-size: 17px;
    /* font-weight: bold; */
    color: #f5f5f5;
    text-decoration: none;
  }
}

/* #skillsList {
  padding-bottom: 5rem;
} */

@media screen and (max-width: 960px) {
  #skillsList {
    height: 250px;
    scale: 0.5;
    padding-bottom: none !important;
  }
}

/* 

WORK

*/

.workContainer {
  flex-wrap: wrap;
  display: flex;
  box-shadow: 0 0 5px #f5f5f5, -2px 0 5px #8a2387ce, 2px 0 5px #f27121c0;
  overflow: hidden;
  position: relative;
  background-color: #171718;
  /* color: #f5f5f5; */
  z-index: 0;
}

.workTitle a {
  color: #f5f5f5;
  text-decoration: none;
}

.workTitle {
  border: solid;
  border-color: #f5f5f5;
  border-top-right-radius: 10px;
  border-bottom-left-radius: 10px;
  transition: transform 0.5s ease all;
}

.workDesc {
  font-size: 25px;
  color: #f5f5f5;
  text-decoration: none;
}

.workImg {
  max-height: 180px;
  width: 100%;
  object-fit: cover;
  position: relative;
  /* -webkit-transition: opacity 0.35s, -webkit-transform 0.35s; */
  /* transition: opacity 0.35s, transform 0.35s; */
  /* -webkit-transform: scale(1.15); */
  transform: scale(1.03);
}

.workImgLink {
  display: contents;
}

.workImg:hover {
  opacity: 0.9;
  -webkit-transform: scale(1);
  transform: scale(1);
}

.workDesc {
  overflow: hidden;
  text-overflow: ellipsis;
  text-align: justify;
  height: 100%;
  font-size: 20px;
}

@media screen and (min-width: 930px) {
  .workContainer {
    flex-wrap: inherit;
  }

  .workTitle a {
    color: #f5f5f5;
    text-decoration: none;
    font-size: 50px;
  }

  .workTitle:hover {
    color: #f5f5f5;
    text-decoration: none;
    font-size: 50px;
    scale: 1.02;
  }

  .workDesc {
    font-size: 25px;
    color: #f5f5f5;
    text-decoration: none;
  }

  .workImg {
    max-width: 300px;
    max-height: 100%;
    /* object-fit: cover; */
    transition: transform 0.3s ease;
  }

  .workWords {
    padding: 3rem;
    width: 100%;
  }
}

/* 

FOOTER

*/

.footerImg {
  /* background-image: url("./img/footerImg.jpg"); */
  background-color: #121212;
  background-size: contain;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  top: 50%;
  left: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: 0;
}

#footerTitle {
  font-size: 70px;
  font-weight: bold;
  color: #f5f5f5;
  text-decoration: none;
}

#footerIcons {
  color: #f5f5f5;
  font-size: 40px;
}

#footerIcons:hover {
  color: #f5f5f5;
  font-size: 40px;
  scale: 1.1;
  /* box-shadow: 1px 1px 1px rgb(255, 255, 255); */
  transition: 0.3s ease all;
  border: none;

  transform: rotate(-4deg);
}

#footerIcons::after {
  content: "";
  display: block;
  width: 0;
  height: 3px;
  background: #f5f5f5;
  transition: width 0.3s;
  box-shadow: 2px 4px 3px rgba(0, 0, 0, 0.5);
}

#footerIcons:hover::after {
  width: 100%;
}

@media screen and (max-width: 960px) {
  #footerIcons {
    color: #f5f5f5;
    font-size: 20px;
  }
}

@media screen and (max-width: 960px) {
  #footerIcons:hover {
    color: #f5f5f5;
    font-size: 20px;
    scale: 1.1;
    /* box-shadow: 1px 1px 1px rgb(255, 255, 255); */
    transition: 0.3s ease all;
    border: none;
    transform: rotate(-4deg);
  }
}

.foot {
  color: #f5f5f5;
  font-size: 18px;
  display: flex;
  justify-content: start;
  transition: 0.3s ease all;
}

@media screen and (max-width: 960px) {
  .foot {
    display: flex;
    justify-content: center;
    color: #f5f5f5;
    font-size: 15px;
    transition: 0.3s ease all;
  }
}

#upBtn {
  color: #f5f5f5;
  position: fixed;
  bottom: 35px;
  right: 50px;
  height: 50px;
  font-size: 50px;
  cursor: pointer;
}

@media screen and (max-width: 960px) {
  #upBtn {
    color: #f5f5f5;
    position: fixed;
    bottom: 30px;
    right: 25px;
    height: 35px;
    font-size: 25px;
    cursor: pointer;
  }
}

#upBtn:hover {
  color: #f5f5f5;
  position: fixed;
  bottom: 50px;
  right: 50px;
  height: 50px;
  font-size: 50px;
  transition: 0.3s ease all;
  scale: 1.3;
}

@media screen and (max-width: 960px) {
  #upBtn:hover {
    color: #f5f5f5;
    position: fixed;
    bottom: 30px;
    right: 25px;
    height: 39px;
    font-size: 25px;
    cursor: pointer;
    transition: 0.3s ease all;
    scale: 1.3;
  }
}


/* 

import React, { useEffect, useState } from "react";
import ScoreBoard from "../components/ScoreBoard";
import jung from "../img/Jung.png";
// import greenCandy from "./img/blueGirl.png";
import blueGirl from "../img/blueGirl.png";
import travis from "../img/Travis.png";
import sally from "../img/Sally.png";
import batGirl from "../img/batGirl.png";
import blank from "../img/blank.png";
import punk from "../img/punk.png"

const width = 8;
const candyColors = [
  jung,
  blueGirl,
  travis,
  sally,
  batGirl,
  punk
];

const Game = () => {
  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);
  const [squareBeingDragged, setSquareBeingDragged] = useState(null);
  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);
  const [scoreDisplay, setScoreDisplay] = useState(0);

  const checkForColumnOfFour = () => {
    for (let i = 0; i <= 39; i++) {
      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];
      const decidedColor = currentColorArrangement[i];
      const isBlank = currentColorArrangement[i] === blank;

      if (
        columnOfFour.every(
          (square) =>
            currentColorArrangement[square] === decidedColor && !isBlank
        )
      ) {
        setScoreDisplay((score) => score + 4);
        columnOfFour.forEach(
          (square) => (currentColorArrangement[square] = blank)
        );
        return true;
      }
    }
  };

  const checkForRowOfFour = () => {
    for (let i = 0; i < 64; i++) {
      const rowOfFour = [i, i + 1, i + 2, i + 3];
      const decidedColor = currentColorArrangement[i];
      const notValid = [
        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,
        54, 55, 62, 63, 64,
      ];
      const isBlank = currentColorArrangement[i] === blank;

      if (notValid.includes(i)) continue;

      if (
        rowOfFour.every(
          (square) =>
            currentColorArrangement[square] === decidedColor && !isBlank
        )
      ) {
        setScoreDisplay((score) => score + 4);
        rowOfFour.forEach(
          (square) => (currentColorArrangement[square] = blank)
        );
        return true;
      }
    }
  };

  const checkForColumnOfThree = () => {
    for (let i = 0; i <= 47; i++) {
      const columnOfThree = [i, i + width, i + width * 2];
      const decidedColor = currentColorArrangement[i];
      const isBlank = currentColorArrangement[i] === blank;

      if (
        columnOfThree.every(
          (square) =>
            currentColorArrangement[square] === decidedColor && !isBlank
        )
      ) {
        setScoreDisplay((score) => score + 3);
        columnOfThree.forEach(
          (square) => (currentColorArrangement[square] = blank)
        );
        return true;
      }
    }
  };

  const checkForRowOfThree = () => {
    for (let i = 0; i < 64; i++) {
      const rowOfThree = [i, i + 1, i + 2];
      const decidedColor = currentColorArrangement[i];
      const notValid = [
        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,
      ];
      const isBlank = currentColorArrangement[i] === blank;

      if (notValid.includes(i)) continue;

      if (
        rowOfThree.every(
          (square) =>
            currentColorArrangement[square] === decidedColor && !isBlank
        )
      ) {
        setScoreDisplay((score) => score + 3);
        rowOfThree.forEach(
          (square) => (currentColorArrangement[square] = blank)
        );
        return true;
      }
    }
  };

  const moveIntoSquareBelow = () => {
    for (let i = 0; i <= 55; i++) {
      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];
      const isFirstRow = firstRow.includes(i);

      if (isFirstRow && currentColorArrangement[i] === blank) {
        let randomNumber = Math.floor(Math.random() * candyColors.length);
        currentColorArrangement[i] = candyColors[randomNumber];
      }

      if (currentColorArrangement[i + width] === blank) {
        currentColorArrangement[i + width] = currentColorArrangement[i];
        currentColorArrangement[i] = blank;
      }
    }
  };

  const dragStart = (e) => {
    setSquareBeingDragged(e.target);
  };
  const dragDrop = (e) => {
    setSquareBeingReplaced(e.target);
  };
  const dragEnd = () => {
    const squareBeingDraggedId = parseInt(
      squareBeingDragged.getAttribute("data-id")
    );
    const squareBeingReplacedId = parseInt(
      squareBeingReplaced.getAttribute("data-id")
    );

    currentColorArrangement[squareBeingReplacedId] =
      squareBeingDragged.getAttribute("src");
    currentColorArrangement[squareBeingDraggedId] =
      squareBeingReplaced.getAttribute("src");

    const validMoves = [
      squareBeingDraggedId - 1,
      squareBeingDraggedId - width,
      squareBeingDraggedId + 1,
      squareBeingDraggedId + width,
    ];

    const validMove = validMoves.includes(squareBeingReplacedId);

    const isAColumnOfFour = checkForColumnOfFour();
    const isARowOfFour = checkForRowOfFour();
    const isAColumnOfThree = checkForColumnOfThree();
    const isARowOfThree = checkForRowOfThree();

    if (
      squareBeingReplacedId &&
      validMove &&
      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)
    ) {
      setSquareBeingDragged(null);
      setSquareBeingReplaced(null);
    } else {
      currentColorArrangement[squareBeingReplacedId] =
        squareBeingReplaced.getAttribute("src");
      currentColorArrangement[squareBeingDraggedId] =
        squareBeingDragged.getAttribute("src");
      setCurrentColorArrangement([...currentColorArrangement]);
    }
  };

  const createBoard = () => {
    const randomColorArrangement = [];
    for (let i = 0; i < width * width; i++) {
      const randomColor =
        candyColors[Math.floor(Math.random() * candyColors.length)];
      randomColorArrangement.push(randomColor);
    }
    setCurrentColorArrangement(randomColorArrangement);
  };

  useEffect(() => {
    createBoard();
  }, []);

  useEffect(() => {
    const timer = setInterval(() => {
      checkForColumnOfFour();
      checkForRowOfFour();
      checkForColumnOfThree();
      checkForRowOfThree();
      moveIntoSquareBelow();
      setCurrentColorArrangement([...currentColorArrangement]);
    }, 100);
    return () => clearInterval(timer);
  }, [
    checkForColumnOfFour,
    checkForRowOfFour,
    checkForColumnOfThree,
    checkForRowOfThree,
    moveIntoSquareBelow,
    currentColorArrangement,
  ]);

  return (
    <div className="candyContainer">
      <div className="candyGame">
        {currentColorArrangement.map((candyColor, index) => (
          <img
            key={index}
            src={candyColor}
            alt={candyColor}
            data-id={index}
            draggable={true}
            onDragStart={dragStart}
            onDragOver={(e) => e.preventDefault()}
            onDragEnter={(e) => e.preventDefault()}
            onDragLeave={(e) => e.preventDefault()}
            onDrop={dragDrop}
            onDragEnd={dragEnd}
          />
        ))}
      </div>
      <ScoreBoard score={scoreDisplay} />
    </div>
  );
};

export default Game;





const ScoreBoard = ({ score }) => {
  return (
    <div className="score-board">
      <h2>{score}</h2>
    </div>
  )
}

export default ScoreBoard






*/